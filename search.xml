<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Zhang's 全栈学习记录1]]></title>
      <url>http://yoursite.com/2016/08/04/Zhang-s-%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/</url>
      <content type="html"><![CDATA[<h1 id="全栈学习记录–开篇"><a href="#全栈学习记录–开篇" class="headerlink" title="全栈学习记录–开篇"></a>全栈学习记录–开篇</h1><p>三年前，力学专业的我，阴差阳错入职华为开启了技术服务工程师的职业生涯，在经历了一线三年的磨砺后，毅然决然下了一个重要的决定，转去做了开发。而我的年龄，算是大龄程序员了，又是没有任何相关经验，压力真的很大。现在算是完全转行，抛弃了从前所有的经验，从头再来，也想着应该记录记录这个过程。</p>
<p>一个多月前，开启研发生涯后，莫名其妙的被分配了前端的开发任务。看到html、CSS、JavaScript文件一头雾水，而且公司使用了很多框架的东西，更是各种封装，对于零经验的我，简直是天书，但是没办法，既然上了这条船，怎么也要好好走下去。</p>
<p>开始在知乎、豆瓣等等上面搜集各种前端入门的资料，慢慢的，摸着石头过河的方式，也逐步走上了一点点正道。</p>
<p><img src="https://img3.doubanio.com/lpic/s22703394.jpg" alt=""></p>
<p>HTML和CSS是从Jon Duckett这本书开始的，虽然是本英文书，但是书的排版真的很新颖，也看得出来作者的用心；HTML是超文本标记语言，严格来说不是编程语言，只是用来标记网页中的各种元素，从而构建网页的结构；最新的HTML5中添加了semantic标签，如header，article，footer等，从字面意思上，形象的将网页划分成不同的模块，使我们构建网页起来更加规范，不再是一股脑的使用div。CSS自然不用说了，网页的布局、字体、位置的调整都靠它，CSS很好入门，但想做好，可不是一件容易的事情。特别是现在比较流行的响应式布局设计，不过有Bootstrap工具包，可以不用重复造轮子，但是基础还是得先搭好才行。</p>
<p>在学习的过程中，也学习了程序员最流行的交友社区，GitHub；GitHub是基于Git的一个代码管理平台，不仅仅是代码管理，协作工作，而且还能在上面学习各种开源的项目，真的是开启了另一片天地。在此，也安利一下自己的Github地址，<a href="https://github.com/athanzhang" target="_blank" rel="external">athanzhang</a>。目前，做的东西还不多，只做过几个静态的页面，然后在别人的基础上，改了一个音乐播放器，以后学的更多了，再慢慢加内容。</p>
<p>在使用GitHub的过程中，又发现了Hexo+GitHub可以快速搭建自己的Blog，在折腾了几个小时后，把自己的第一个博客给搭好了，顺便也安利一下，目前文章不多，以后多更，<a href="https://athanzhang.github.io/" target="_blank" rel="external">Athanzhang’s blog</a>。</p>
<p>待续…</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript高级程序设计对象思考]]></title>
      <url>http://yoursite.com/2016/08/02/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AF%B9%E8%B1%A1%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s8958650.jpg" alt=""></p>
<p>javaScript创建对象有好几总模式：工厂模式、构造函数模式、原型模式；其作用都是为了创建对象时，针对特定接口来封装，从而创建定制的对象。这几个模式，各有优缺点：工厂模式创造的对象，其类型还是Object；构造函数模式中的方法会在每个实例上重新创建一次，浪费资源；而原型模式，如果含有引用类型属性（如数组），则会导致，一个实例如果改变了原型对象中的属性，其他实例的这个属性也会动态被改变。比如下面这中情况：<br>​    <code>function Person() {</code><br><code>}</code><br><code>Person.prototype={</code><br><code>name:&quot;zhang&quot;,</code><br><code>age:29,</code><br><code>job:&quot;Front-end Engineer&quot;,</code><br><code>friends:[&quot;xu&quot;,&quot;li&quot;]</code><br><code>};</code><br><code>var person1=new Person();</code><br><code>var person2=new Person();</code><br><code>person1.fridens.push(&quot;jiao&quot;);</code><br><code>alert(person1.friends);//&quot;xu,li,jiao&quot;</code><br><code>alert(person2.friends);//&quot;xu,li,jiao&quot;</code><br>从上面的例子看到，当person1覆盖原型对象中的属性时，由于原型对象的动态性，person2里面的friends属性也被改变了，显然这是不合理的。<br>下面重点讲一下原型模式的一些难理解的地方。首先，原型模式最常见的语法是：<br><code>function Person() {</code><br><code>}</code><br><code>Person.prototype={</code><br><code>name:&quot;zhang&quot;,</code><br><code>age:29,</code><br><code>job:&quot;Front-end Engineer&quot;,</code><br><code>friends:[&quot;xu&quot;,&quot;li&quot;]</code><br><code>};</code><br>另一种定义的语法是：<br><code>function Person() {</code><br><code>Person.prototype.name=&quot;zhang&quot;;</code><br><code>Person.prototype.age=29;</code><br><code>Person.prototype.job=&quot;Front-end Engineer&quot;;</code><br><code>Person.prototype.friends=[&quot;xu&quot;,&quot;li&quot;];</code><br><code>}</code><br>但是这两种语法形式是有区别的，第一种的原型对象的constructor是指向Object对象的；而第二种的constructor是指向Person函数的。原因是，第一种在定义构造函数Person时，创建了一个默认prototype，这个prototype指向的是默认的原型对象；而下面的prototype对象的定义的时候，相当于是重新创建了一个原型对象，而这个原型对象的类型其实就是Object，其constructor指向的也是Object构造函数。从下图就可以很明白的看出这一点：</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/prototype.JPG" alt=""></p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/javaScript.jpg" alt=""></p>
<p>而这一点在采用构造函数模式和原型模式组合方式时也有体现，原书中，是在prototype对象里显示的将constructor指向了Person函数，其实，不显示指向，Person.prototype.constructor的指向也是Person，因为这里没有完全重新建立prototype对象，只是在创建构造函数时创建的prototype对象基础上修改。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[javaScript&DOM 编程艺术比较难理解的一个地方]]></title>
      <url>http://yoursite.com/2016/07/31/javaScript-DOM-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E6%AF%94%E8%BE%83%E9%9A%BE%E7%90%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9C%B0%E6%96%B9/</url>
      <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s4677623.jpg" alt=""></p>
<p>这本入门书籍，的确经典，在第十章的时候，使用javaScript实现简单的动画，为了能够抽象化，在函数里面传递了参数，而javaScript里面的内置函数setTimeout函数的第一个参数是字符串，这个时候就涉及到了字符串的拼接，为了让调用函数作为参数放到setTimeout函数里，都保持是一个字符串。</p>
<p>定义的函数是这样的 ：</p>
<p><code>moveElement(elementId，final_x,final_y,interval)，</code></p>
<p>其中第一个参数是一个字符串，其余为number。</p>
<p>而定义的拼接变量为：</p>
<p> <code>var repeat=&quot;moveElement(&#39;&quot;+elementId+&quot;&#39;,&quot;+final_x+&quot;,&quot;+final_y+&quot;,&quot;+interval+&quot;)&quot;;</code></p>
<p>javaScript里面拼接字符串的时候，都是采用string+string的方式，于是我们可以拆解上述变量</p>
<blockquote>
<p>第一个字符串为 “moveElement(‘“</p>
<p>第二个为变量 elementId</p>
<p>第三个字符串为”‘,”</p>
<p>第四个为变量final_x</p>
<p>第五个为字符串”,”</p>
<p>第六个为变量final_y</p>
<p>第七个为字符串”,”</p>
<p>第八个为变量interval</p>
<p>最后一个味字符串”)”</p>
</blockquote>
<p>这样拼接后会保留住双引号里面的字符串的原样，所以相当于解析成了如下形式”moveElement(‘message’,100,200,10)”，（单引号保留，为了保持传入moveElement函数的第一参数为字符串）;</p>
<p>了解这个道理，其实将变量repeat定义为如下形式，也是一样的结果</p>
<p><code>var repeat =&quot;moveElement(\&quot;&quot;+elementID+&quot;\&quot;,&quot;+final_x+&quot;,&quot;+final_y+&quot;,&quot;+interval+&quot;)&quot;;</code></p>
<p>如这样的情况，var repeat =”moveElement(\””+’zhang’+”\”,”+1+”,”+2+”,”+3+”)”;</p>
<p>其运行的结果就是：</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/dom.JPG" alt=""></p>
<p>只不过作者没有去使用转义字符，而是使用了单引号被双引号包括时保留原义的用法。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://yoursite.com/2016/07/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
</search>
