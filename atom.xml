<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Athanzhang&#39;s blog</title>
  <subtitle>码农，全栈修炼者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-12T14:18:08.215Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Athan Zhang</name>
    <email>athan1114@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zhang&#39;s全栈学习记录-2</title>
    <link href="http://yoursite.com/2016/08/12/zhang-s%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-2/"/>
    <id>http://yoursite.com/2016/08/12/zhang-s全栈学习记录-2/</id>
    <published>2016-08-12T12:48:42.000Z</published>
    <updated>2016-08-12T14:18:08.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="全栈学习记录–逐渐成长"><a href="#全栈学习记录–逐渐成长" class="headerlink" title="全栈学习记录–逐渐成长"></a>全栈学习记录–逐渐成长</h2><p>在开篇的时候说到了HTML和CSS的学习，推荐的也是入门的学习，自己其实也是刚刚入门，深入的路途还有很远的路要走。</p>
<p>最近一直在学JavaScript，看的是网上极力推荐的JavaScript高级程序设计：</p>
<p><img src="https://img3.doubanio.com/lpic/s8958650.jpg" alt=""></p>
<p>网上大抵看到关于JavaScript的技术，这里都有涵盖，讲的也挺透彻；不过，不知道是不是这本书不太对我胃口，觉得后面关于BOM以及DOM的一些东西，感觉没有JavaScript&amp;DOM 编程艺术有趣，还有事件、表单的一些东西，我不知道其他人是否有这种感觉，总之，有点让人看不进去。</p>
<p>所以，更推荐的是Eloquent JavaScript这本入门书：</p>
<p><img src="https://img3.doubanio.com/lpic/s27359284.jpg" alt="Eloquent JavaScript"></p>
<p>作者十分牛逼，而且也配合一些有趣的projects，觉得这个更适合自己，本来前端就是强调所见即所得，我觉得能做一些东西出来看，更有趣一些，书，个人认为，得选自己觉得看起来更爽的。</p>
<p>其实，有时候，我们总觉得英文书看起来效率会低一些，确实是有这么一点，但是，作为程序员，英语又是必备技能，所以，有时候，看看英文原版书籍未尝不是一件好事，学习的过程中，英语也得到了进步。这里，可以看看李笑来的博客，<a href="http://xiaolai.li/" target="_blank" rel="external">人人都是工程师</a>。</p>
<p>待续。。。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;全栈学习记录–逐渐成长&quot;&gt;&lt;a href=&quot;#全栈学习记录–逐渐成长&quot; class=&quot;headerlink&quot; title=&quot;全栈学习记录–逐渐成长&quot;&gt;&lt;/a&gt;全栈学习记录–逐渐成长&lt;/h2&gt;&lt;p&gt;在开篇的时候说到了HTML和CSS的学习，推荐的也是入门的学习，自己
    
    </summary>
    
      <category term="全栈记录" scheme="http://yoursite.com/categories/%E5%85%A8%E6%A0%88%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="full-stack" scheme="http://yoursite.com/tags/full-stack/"/>
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>Understanding   javaScript    Closure</title>
    <link href="http://yoursite.com/2016/08/08/Understanding-javaScript-Closure/"/>
    <id>http://yoursite.com/2016/08/08/Understanding-javaScript-Closure/</id>
    <published>2016-08-08T15:19:25.000Z</published>
    <updated>2016-08-08T15:28:02.383Z</updated>
    
    <content type="html"><![CDATA[<p>今天，看到javaScript闭包这一块的地方，不得不说，第一次接触这样的函数行为，是很难理解的，也是研究了半天，才总算理解了闭包这个牛逼的“东西”；</p>
<p>首先，什么是闭包，简单来说，就是内部函数（inner function）可以访问外部函数（outer function）的变量以及参数（注意inner function不能直接调用outer function的arguments对象，但可以直接使用参数）；由于，有作用域链（scope chain）的存在，导致闭包在outer function即使在被调用之后，inner function依然可以访问outer function的变量，这意味着，本来应该被销毁的局部变量，却一直保留在了内存中。</p>
<p>下面看一个简单的闭包例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">function showName(firstName,lastName) &#123;</div><div class="line">  var nameInfo=&quot;My name is &quot;;</div><div class="line"></div><div class="line">  function makeFullName() &#123;</div><div class="line"></div><div class="line">  return nameInfo+firstName+&quot; &quot;+lastName;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">return makeFullName;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">showName(&quot;athan&quot;,&quot;Zhang&quot;)();</div><div class="line"></div><div class="line">//会显示My name is athan Zhang</div></pre></td></tr></table></figure>
<p>上面这个例子，简单的解释了一下内部函数可以直接调用外部函数的变量，以及直接使用外部函数的参数。</p>
<p>接下来，看一个比较复杂的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">function celebrityIDCreator (theCelebrities) &#123;</div><div class="line"></div><div class="line">  var i;</div><div class="line"></div><div class="line">  var uniqueID = 100;</div><div class="line"></div><div class="line">  for (i = 0; i &lt; theCelebrities.length; i++) &#123;</div><div class="line"></div><div class="line">  theCelebrities[i][&quot;id&quot;] = function ()  &#123;</div><div class="line"></div><div class="line">  return uniqueID + i;</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"> &#125;</div><div class="line"></div><div class="line">  return theCelebrities;</div><div class="line"></div><div class="line">&#125;</div><div class="line">    var actionCelebs = [&#123;name:&quot;Stallone&quot;, id:0&#125;, &#123;name:&quot;Cruise&quot;, id:0&#125;,&#123;name:&quot;Willis&quot;, id:0&#125;];   </div><div class="line"></div><div class="line">    var createIdForActionCelebs = celebrityIDCreator (actionCelebs);</div><div class="line"></div><div class="line">    var stalloneID = createIdForActionCelebs [0];</div><div class="line"></div><div class="line">    console.log(stalloneID.id());</div><div class="line"></div><div class="line">    var cruiseID = createIdForActionCelebs [1];</div><div class="line"></div><div class="line">    console.log(cruiseID.id());</div></pre></td></tr></table></figure>
<p>这个例子中，console打印出的结果都是103。因为var createIdForActionCelebs = celebrityIDCreator (actionCelebs) 这里在调用外部函数celebrityIDCreator时，完成了外部函数里面定义的语句块的内容，这也意味着，for循环也执行完毕，数组theCelebrities的id属性被赋予了函数表达式，但这个内部函数此时并没有被调用。在后面stalloneID.id()显示调用内部函数时，返回了uniqueID+i的值，而外部函数早已调用完毕，此时的i的值，已经是3，所以，无论调用theCelebrities数组里面哪一个对象，返回的值都是一样的，这也是闭包存在的一个问题，那怎么解决这个问题呢，得看下面的例子。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">function celebrityIDCreator (theCelebrities) &#123;</div><div class="line">    var i;</div><div class="line"></div><div class="line">    var uniqueID = 100;</div><div class="line"></div><div class="line">    for (i = 0; i &lt; theCelebrities.length; i++) &#123;</div><div class="line"></div><div class="line">    theCelebrities[i][&quot;id&quot;] = function (j)  &#123; </div><div class="line"></div><div class="line">    return function () &#123; return uniqueID + j; &#125; () ;</div><div class="line"></div><div class="line">      &#125; (i); </div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  return theCelebrities;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  var actionCelebs = [&#123;name:&quot;Stallone&quot;, id:0&#125;, &#123;name:&quot;Cruise&quot;, id:0&#125;, &#123;name:&quot;Willis&quot;, id:0&#125;];</div><div class="line"></div><div class="line">  var createIdForActionCelebs = celebrityIDCreator (actionCelebs);</div><div class="line"></div><div class="line">  var stalloneID = createIdForActionCelebs [0];</div><div class="line"></div><div class="line">  console.log(stalloneID.id); // 100</div><div class="line"></div><div class="line">  var cruiseID = createIdForActionCelebs [1];</div><div class="line"></div><div class="line">  console.log(cruiseID.id);</div></pre></td></tr></table></figure>
<p>这个例子里，使用了一种Immediately Invoked Function Expression（立刻调用函数表达式）的语法。上面的函数表达式function(j){/<em>code</em>/}(i)，直接在赋值时就调用了，而且将i的值赋给了j，同样闭包里面也用了同样的语法，这样就可以在循环时，就直接调用内部函数，得到想要的值，这个例子里面打印的就是100和101。</p>
<p>有一点需要注意的是，函数表达式function(j){/<em>code</em>/}(i)和函数声明是不一样的，如果在以为函数声明时，在函数后面加上（）这个括号，就是直接调用函数，是会出错的，因为编译器认为这个是函数声明，而不是函数表达式。但是如果用一个括号，将整个函数声明包起来，编译器会认为是一个表达式，就不会报错，如下面所示：</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/closure.JPG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天，看到javaScript闭包这一块的地方，不得不说，第一次接触这样的函数行为，是很难理解的，也是研究了半天，才总算理解了闭包这个牛逼的“东西”；&lt;/p&gt;
&lt;p&gt;首先，什么是闭包，简单来说，就是内部函数（inner function）可以访问外部函数（outer fun
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
      <category term="closure" scheme="http://yoursite.com/tags/closure/"/>
    
  </entry>
  
  <entry>
    <title>那些年看过的思密达的好电影</title>
    <link href="http://yoursite.com/2016/08/07/%E9%82%A3%E4%BA%9B%E5%B9%B4%E7%9C%8B%E8%BF%87%E7%9A%84%E6%80%9D%E5%AF%86%E8%BE%BE%E7%9A%84%E5%A5%BD%E7%94%B5%E5%BD%B1/"/>
    <id>http://yoursite.com/2016/08/07/那些年看过的思密达的好电影/</id>
    <published>2016-08-07T12:57:11.000Z</published>
    <updated>2016-08-10T14:35:07.667Z</updated>
    
    <content type="html"><![CDATA[<p>思密达的剧情，暴力，悬疑电影是他们比较喜欢拍的题材，也确实拍的挺好看的，这些年也看过不少，推荐一些经典，与大家分享</p>
<p>1.恐怖直播﻿</p>
<p>全片无尿点，感觉比狙击电话亭精彩多了，河正宇确实屌﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/kbzb.jpg" alt=""></p>
<p>﻿2.杀人回忆﻿片子很长，但导演没有让你无聊，慢慢的将你带入案件中去，看完久久回味﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/srhy.jpg" alt=""></p>
<p>﻿3.母亲﻿杀人回忆导演奉俊昊又一力作，不要因为片名平淡无奇而放过这部电影，奉俊昊的牛逼之处在于，他总能把你慢慢带入电影的节奏，插一句，我觉得流浪汉是凶手﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/mq.jpg" alt=""></p>
<p>4.黄海﻿</p>
<p>朝鲜人在中国乱混跑韩国去杀人的故事﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/hh.jpg" alt=""></p>
<p>﻿5.追击者﻿</p>
<p>河金组合又一部让人久久不能忘怀的片子，明明杀手离你很近，却偏偏抓不到﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/zjz.jpg" alt=""></p>
<p>﻿6.哭声﻿</p>
<p>罗泓轸最近又一力作，网上争议很大，至于为什么争议这么大，看看就明白了，罗泓轸是谁，黄海和追击者都是他的﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/ks.jpg" alt=""></p>
<p>7.走到尽头</p>
<p>﻿明快，紧张的节奏，特别是殡仪馆那一段，这片子看下来就一个字，爽﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/zdjt.jpg" alt=""></p>
<p>﻿8.老男孩</p>
<p>﻿说到思密达的电影，怎么能不提到这部神作，复仇到了一种境界就是变态了﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/lnh.jpg" alt=""></p>
<p>﻿9.看见恶魔﻿</p>
<p>老崔的又一复仇作品，不过这里老崔演的是一个强奸犯，而且是相当变态的强奸犯﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/kjem.jpg" alt=""></p>
<p>﻿10.新世界﻿</p>
<p>老崔演的韩国版无间道，个人觉得没有港版经典﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/xsj.jpg" alt=""></p>
<p>﻿11.老手﻿</p>
<p>说到老崔，不得又不提一下上部新世界里面的阿黄，一个喜欢暴力的大叔，挺有趣﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/ls.jpg" alt=""></p>
<p>12.不可饶恕﻿</p>
<p>又一部复仇，父亲给女儿的复仇﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/bkrs.jpg" alt=""></p>
<p>﻿13.我要复仇﻿</p>
<p>谈到复仇，怎么能漏掉这部有点奇怪的片子，看的时候莫名其妙，不过，看完，原来神秘组织是真的</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/wyfc.jpg" alt=""></p>
<p>14.雪国列车﻿</p>
<p>这部是上部我要复仇里的胖子演的，这胖子又是演杀人回忆的，但这部里面明显瘦了，有些人不喜欢这部片子，不过，构思还是不错的</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/xglc.jpg" alt=""></p>
<p>15.大叔（孤胆特工）﻿</p>
<p>怎么能放过元彬的这部动作片呢，虽然母亲里面他演智障，但这里面屌啊﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/gdtg.jpg" alt=""></p>
<p>16.抓住那个家伙﻿</p>
<p>一个母亲的执着，一个警察的执着﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/zzngjh.jpg" alt=""></p>
<p>﻿17.金福南杀人事件始末﻿</p>
<p>千万，千万别把老实人逼急了</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/jfnsrsjsm.jpg" alt=""></p>
<p>18.流感﻿</p>
<p>这摆在中国又是要被和谐的，哪能反政府﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/lg.jpg" alt=""></p>
<p>19.那家伙的声音﻿</p>
<p>又是一个儿子被绑架的故事，思密达貌似很喜欢拍啊</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/njhdsy.jpg" alt=""></p>
<p>20.率性而活﻿</p>
<p>比较搞人的一部电影，俯卧撑很创意﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/sxeh.jpg" alt=""></p>
<p>21.绿头苍蝇﻿</p>
<p>名字翻译的好，真有苍蝇的味道﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/ltcy.jpg" alt=""></p>
<p>﻿22.邻居﻿</p>
<p>尼玛，邻居这么屌你知道吗﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/lj.jpg" alt=""></p>
<p>23.熔炉</p>
<p>﻿这不用多介绍了吧，听说是改法律的一部</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/rl.jpg" alt=""></p>
<p>﻿24.素媛﻿</p>
<p>催泪系列，不感动你是我爸爸</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/sy.jpg" alt=""></p>
<p>25.7号房的礼物﻿</p>
<p>同样催泪系列，父爱的伟大﻿</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/qhfdlw.jpg" alt=""></p>
<p>﻿</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;思密达的剧情，暴力，悬疑电影是他们比较喜欢拍的题材，也确实拍的挺好看的，这些年也看过不少，推荐一些经典，与大家分享&lt;/p&gt;
&lt;p&gt;1.恐怖直播﻿&lt;/p&gt;
&lt;p&gt;全片无尿点，感觉比狙击电话亭精彩多了，河正宇确实屌﻿&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oasnye
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="电影" scheme="http://yoursite.com/tags/%E7%94%B5%E5%BD%B1/"/>
    
      <category term="韩国" scheme="http://yoursite.com/tags/%E9%9F%A9%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>Zhang&#39;s 全栈学习记录1</title>
    <link href="http://yoursite.com/2016/08/04/Zhang-s-%E5%85%A8%E6%A0%88%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%951/"/>
    <id>http://yoursite.com/2016/08/04/Zhang-s-全栈学习记录1/</id>
    <published>2016-08-04T14:25:02.000Z</published>
    <updated>2016-08-04T15:11:39.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="全栈学习记录–开篇"><a href="#全栈学习记录–开篇" class="headerlink" title="全栈学习记录–开篇"></a>全栈学习记录–开篇</h1><p>三年前，力学专业的我，阴差阳错入职华为开启了技术服务工程师的职业生涯，在经历了一线三年的磨砺后，毅然决然下了一个重要的决定，转去做了开发。而我的年龄，算是大龄程序员了，又是没有任何相关经验，压力真的很大。现在算是完全转行，抛弃了从前所有的经验，从头再来，也想着应该记录记录这个过程。</p>
<p>一个多月前，开启研发生涯后，莫名其妙的被分配了前端的开发任务。看到html、CSS、JavaScript文件一头雾水，而且公司使用了很多框架的东西，更是各种封装，对于零经验的我，简直是天书，但是没办法，既然上了这条船，怎么也要好好走下去。</p>
<p>开始在知乎、豆瓣等等上面搜集各种前端入门的资料，慢慢的，摸着石头过河的方式，也逐步走上了一点点正道。</p>
<p><img src="https://img3.doubanio.com/lpic/s22703394.jpg" alt=""></p>
<p>HTML和CSS是从Jon Duckett这本书开始的，虽然是本英文书，但是书的排版真的很新颖，也看得出来作者的用心；HTML是超文本标记语言，严格来说不是编程语言，只是用来标记网页中的各种元素，从而构建网页的结构；最新的HTML5中添加了semantic标签，如header，article，footer等，从字面意思上，形象的将网页划分成不同的模块，使我们构建网页起来更加规范，不再是一股脑的使用div。CSS自然不用说了，网页的布局、字体、位置的调整都靠它，CSS很好入门，但想做好，可不是一件容易的事情。特别是现在比较流行的响应式布局设计，不过有Bootstrap工具包，可以不用重复造轮子，但是基础还是得先搭好才行。</p>
<p>在学习的过程中，也学习了程序员最流行的交友社区，GitHub；GitHub是基于Git的一个代码管理平台，不仅仅是代码管理，协作工作，而且还能在上面学习各种开源的项目，真的是开启了另一片天地。在此，也安利一下自己的Github地址，<a href="https://github.com/athanzhang" target="_blank" rel="external">athanzhang</a>。目前，做的东西还不多，只做过几个静态的页面，然后在别人的基础上，改了一个音乐播放器，以后学的更多了，再慢慢加内容。</p>
<p>在使用GitHub的过程中，又发现了Hexo+GitHub可以快速搭建自己的Blog，在折腾了几个小时后，把自己的第一个博客给搭好了，顺便也安利一下，目前文章不多，以后多更，<a href="https://athanzhang.github.io/" target="_blank" rel="external">Athanzhang’s blog</a>。</p>
<p>待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;全栈学习记录–开篇&quot;&gt;&lt;a href=&quot;#全栈学习记录–开篇&quot; class=&quot;headerlink&quot; title=&quot;全栈学习记录–开篇&quot;&gt;&lt;/a&gt;全栈学习记录–开篇&lt;/h1&gt;&lt;p&gt;三年前，力学专业的我，阴差阳错入职华为开启了技术服务工程师的职业生涯，在经历了一线三
    
    </summary>
    
      <category term="全栈记录" scheme="http://yoursite.com/categories/%E5%85%A8%E6%A0%88%E8%AE%B0%E5%BD%95/"/>
    
    
      <category term="full-stack" scheme="http://yoursite.com/tags/full-stack/"/>
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计对象思考</title>
    <link href="http://yoursite.com/2016/08/02/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%AF%B9%E8%B1%A1%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2016/08/02/JavaScript高级程序设计对象思考/</id>
    <published>2016-08-02T03:13:56.000Z</published>
    <updated>2016-08-02T06:48:31.439Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s8958650.jpg" alt=""></p>
<p>javaScript创建对象有好几总模式：工厂模式、构造函数模式、原型模式；其作用都是为了创建对象时，针对特定接口来封装，从而创建定制的对象。这几个模式，各有优缺点：工厂模式创造的对象，其类型还是Object；构造函数模式中的方法会在每个实例上重新创建一次，浪费资源；而原型模式，如果含有引用类型属性（如数组），则会导致，一个实例如果改变了原型对象中的属性，其他实例的这个属性也会动态被改变。比如下面这中情况：<br>​    <code>function Person() {</code><br><code>}</code><br><code>Person.prototype={</code><br><code>name:&quot;zhang&quot;,</code><br><code>age:29,</code><br><code>job:&quot;Front-end Engineer&quot;,</code><br><code>friends:[&quot;xu&quot;,&quot;li&quot;]</code><br><code>};</code><br><code>var person1=new Person();</code><br><code>var person2=new Person();</code><br><code>person1.fridens.push(&quot;jiao&quot;);</code><br><code>alert(person1.friends);//&quot;xu,li,jiao&quot;</code><br><code>alert(person2.friends);//&quot;xu,li,jiao&quot;</code><br>从上面的例子看到，当person1覆盖原型对象中的属性时，由于原型对象的动态性，person2里面的friends属性也被改变了，显然这是不合理的。<br>下面重点讲一下原型模式的一些难理解的地方。首先，原型模式最常见的语法是：<br><code>function Person() {</code><br><code>}</code><br><code>Person.prototype={</code><br><code>name:&quot;zhang&quot;,</code><br><code>age:29,</code><br><code>job:&quot;Front-end Engineer&quot;,</code><br><code>friends:[&quot;xu&quot;,&quot;li&quot;]</code><br><code>};</code><br>另一种定义的语法是：<br><code>function Person() {</code><br><code>Person.prototype.name=&quot;zhang&quot;;</code><br><code>Person.prototype.age=29;</code><br><code>Person.prototype.job=&quot;Front-end Engineer&quot;;</code><br><code>Person.prototype.friends=[&quot;xu&quot;,&quot;li&quot;];</code><br><code>}</code><br>但是这两种语法形式是有区别的，第一种的原型对象的constructor是指向Object对象的；而第二种的constructor是指向Person函数的。原因是，第一种在定义构造函数Person时，创建了一个默认prototype，这个prototype指向的是默认的原型对象；而下面的prototype对象的定义的时候，相当于是重新创建了一个原型对象，而这个原型对象的类型其实就是Object，其constructor指向的也是Object构造函数。从下图就可以很明白的看出这一点：</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/prototype.JPG" alt=""></p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/javaScript.jpg" alt=""></p>
<p>而这一点在采用构造函数模式和原型模式组合方式时也有体现，原书中，是在prototype对象里显示的将constructor指向了Person函数，其实，不显示指向，Person.prototype.constructor的指向也是Person，因为这里没有完全重新建立prototype对象，只是在创建构造函数时创建的prototype对象基础上修改。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s8958650.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;javaScript创建对象有好几总模式：工厂模式、构造函数模式、原型模式；其作用都是为了创建对象时，针对特定接口来封装，从而创建定制
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>javaScript&amp;DOM 编程艺术比较难理解的一个地方</title>
    <link href="http://yoursite.com/2016/07/31/javaScript-DOM-%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF%E6%AF%94%E8%BE%83%E9%9A%BE%E7%90%86%E8%A7%A3%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9C%B0%E6%96%B9/"/>
    <id>http://yoursite.com/2016/07/31/javaScript-DOM-编程艺术比较难理解的一个地方/</id>
    <published>2016-07-31T05:10:18.000Z</published>
    <updated>2016-08-02T07:12:44.419Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s4677623.jpg" alt=""></p>
<p>这本入门书籍，的确经典，在第十章的时候，使用javaScript实现简单的动画，为了能够抽象化，在函数里面传递了参数，而javaScript里面的内置函数setTimeout函数的第一个参数是字符串，这个时候就涉及到了字符串的拼接，为了让调用函数作为参数放到setTimeout函数里，都保持是一个字符串。</p>
<p>定义的函数是这样的 ：</p>
<p><code>moveElement(elementId，final_x,final_y,interval)，</code></p>
<p>其中第一个参数是一个字符串，其余为number。</p>
<p>而定义的拼接变量为：</p>
<p> <code>var repeat=&quot;moveElement(&#39;&quot;+elementId+&quot;&#39;,&quot;+final_x+&quot;,&quot;+final_y+&quot;,&quot;+interval+&quot;)&quot;;</code></p>
<p>javaScript里面拼接字符串的时候，都是采用string+string的方式，于是我们可以拆解上述变量</p>
<blockquote>
<p>第一个字符串为 “moveElement(‘“</p>
<p>第二个为变量 elementId</p>
<p>第三个字符串为”‘,”</p>
<p>第四个为变量final_x</p>
<p>第五个为字符串”,”</p>
<p>第六个为变量final_y</p>
<p>第七个为字符串”,”</p>
<p>第八个为变量interval</p>
<p>最后一个味字符串”)”</p>
</blockquote>
<p>这样拼接后会保留住双引号里面的字符串的原样，所以相当于解析成了如下形式”moveElement(‘message’,100,200,10)”，（单引号保留，为了保持传入moveElement函数的第一参数为字符串）;</p>
<p>了解这个道理，其实将变量repeat定义为如下形式，也是一样的结果</p>
<p><code>var repeat =&quot;moveElement(\&quot;&quot;+elementID+&quot;\&quot;,&quot;+final_x+&quot;,&quot;+final_y+&quot;,&quot;+interval+&quot;)&quot;;</code></p>
<p>如这样的情况，var repeat =”moveElement(\””+’zhang’+”\”,”+1+”,”+2+”,”+3+”)”;</p>
<p>其运行的结果就是：</p>
<p><img src="http://oasnyeg67.bkt.clouddn.com/dom.JPG" alt=""></p>
<p>只不过作者没有去使用转义字符，而是使用了单引号被双引号包括时保留原义的用法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s4677623.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这本入门书籍，的确经典，在第十章的时候，使用javaScript实现简单的动画，为了能够抽象化，在函数里面传递了参数，而javaScr
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
      <category term="front-end" scheme="http://yoursite.com/tags/front-end/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/07/21/hello-world/"/>
    <id>http://yoursite.com/2016/07/21/hello-world/</id>
    <published>2016-07-21T15:49:39.312Z</published>
    <updated>2016-07-21T15:49:39.312Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
